AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:

  ApiIntegracion:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoUserPoolAuth
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          CognitoUserPoolAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            AuthorizationScopes:
              - api-integ/hello
              - api-integ/query
  HelloFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.hello
      CodeUri: ./hello
      Runtime: nodejs12.x
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiIntegracion
            Path: /hello
            Method: GET
  QueryData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 900
      Handler: handler.getdata
      Layers:
        - !Ref BasicDepLayer
      CodeUri: ./query
      Runtime: nodejs12.x
      Events:
        QueryData:
          Type: Api
          Properties:
            RestApiId: !Ref ApiIntegracion
            Path: /query
            Method: POST
      Environment:
          Variables:
            DB_SERVER: 'bd-api-integracion.cra31fd85gko.us-east-1.rds.amazonaws.com'
            DB_DATABASE: 'MpIntegrationClient'
            DB_USERNAME: 'usr_api_integration'
            DB_PASSWORD: 'wkiKt6M#Y9xEY$b6'
            DB_PORT: 1345
      VpcConfig:
        SecurityGroupIds:
          - sg-0a3389e8272fd3297
        SubnetIds:
          - subnet-0070e84d768fa95f6
          - subnet-0bf8cc7c3fb3cb046
  BasicDepLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: api-integ-dep
      Description: Dependencies for Api-Integ
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: mp_integ_cognito_user_pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: mpgroupcolsvls-integ-client
      UserPoolId: !Ref CognitoUserPool    
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: AppColantaQuery
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - api-integ/query
        - api-integ/hello
  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  UserPoolResourceServer: 
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      UserPoolId: !Ref CognitoUserPool 
      Identifier: "api-integ" 
      Name: "api-integ" 
      Scopes: 
      - ScopeName: "hello" 
        ScopeDescription: "Health Service for Verification" 
      - ScopeName: "query"
        ScopeDescription: "Service for query to customers"

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref ApiIntegracion

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${ApiIntegracion}.execute-api.${AWS::Region}.amazonaws.com/dev/'
  
  CognitoUserPoolId:
    Description: "MP Integracion Cognito User Pool Id"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "MP Integracion Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient

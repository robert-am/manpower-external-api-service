AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: CognitoUserPoolAuth
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoUserPoolAuth:
            UserPoolArn:
              Fn::GetAtt:
              - CognitoUserPool
              - Arn
  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.hello
      CodeUri: s3://api-integracion-clientes/2276f37a4bab23521ae56ce8634096d5
      Runtime: nodejs12.x
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /hello
            Method: GET
  QueryData:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.getdata
      CodeUri: s3://api-integracion-clientes/2e8e8bdd2f6cdb45a9c3e69d898647d8
      Runtime: nodejs12.x
      Events:
        QueryData:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /query
            Method: POST
      Environment:
        Variables:
          DB_SERVER: ${file(./config/${self:provider.stage}.json):DB_SERVER}
          DB_DATABASE: ${file(./config/${self:provider.stage}.json):DB_DATABASE}
          DB_USERNAME: ${file(./config/${self:provider.stage}.json):DB_USERNAME}
          DB_PASSWORD: ${file(./config/${self:provider.stage}.json):DB_PASSWORD}
          DB_PORT: ${file(./config/${self:provider.stage}.json):DB_PORT}
      VpcConfig:
        SecurityGroupIds:
        - sg-0a3389e8272fd3297
        SubnetIds:
        - subnet-0e3ed3eeca88f9cee
        - subnet-023fd3ba85f1b2cac
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: __cognito_user_pool
      LambdaConfig:
        PreSignUp:
          Fn::GetAtt:
          - PreSignupLambdaFunction
          - Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: api_gateway_auth_cognito_client
      UserPoolId:
        Ref: CognitoUserPool
  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: "exports.handler = async (event, context, callback) => {\n  event.response\
        \ = { autoConfirmUser: true }\n  return event\n}\n"
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PreSignupLambdaFunction
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}
Outputs:
  Region:
    Description: Region
    Value:
      Ref: AWS::Region
  ApiId:
    Description: API ID
    Value:
      Ref: MyApi
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
  CognitoUserPoolId:
    Description: Cognito User Pool Id
    Value:
      Ref: CognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client Id
    Value:
      Ref: CognitoUserPoolClient
